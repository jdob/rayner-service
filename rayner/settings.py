"""
Django settings for rayner project.

Generated by 'django-admin startproject' using Django 2.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'du_(#gv1((2yws4g&=jh))yu3ua5uy30-at1x%r-*5w3lwjp#z'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20
}


# Application definition

INSTALLED_APPS = [
    'corsheaders',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rayner.service',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'rayner.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, "frontend", "templates"), ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'rayner.wsgi.application'

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_WHITELIST = (
    'localhost:3000',
)
CORS_ORIGIN_REGEX_WHITELIST = (
    'localhost:3000',
)

# Bridge Configuration
BRIDGE_IP = os.environ.get('BRIDGE_IP', None)
BRIDGE_TOKEN = os.environ.get('BRIDGE_TOKEN', None)
BRIDGE_LIGHT = os.environ.get('BRIDGE_LIGHT', None)

if BRIDGE_IP:
    print('Bridge Configuration:')
    print('  IP: %s' % BRIDGE_IP)
    print('  Token: %s' % BRIDGE_TOKEN)
    print('  Light Name: %s' % BRIDGE_LIGHT)
else:
    print('*********************************')
    print('Bridge IP not configured')
    print('*********************************')

# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

if 'MYSQL_DATABASE' in os.environ:
    name = os.environ['MYSQL_DATABASE']
    username = os.environ.get('MYSQL_USERNAME', None)
    password = os.environ.get('MYSQL_PASSWORD', None)
    host = os.environ.get('MYSQL_HOST', None)
    port = os.environ.get('MYSQL_PORT', 3306)

    database = {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': name,
        'USER': username,
        'PASSWORD': password,
        'HOST': host,
        'PORT': port,
    }

    print('Configuring MySQL:')
    print('  Database: %s' % name)
    print('  Username: %s' % username)
    print('  Host: %s' % host)
    print('  Port: %s' % port)

elif 'SQLITE_DATABASE' in os.environ:
    database = {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3')
    }
    print('Configuring sqlite:')
    print('  Name: %s' % database['NAME'])

else:
    database = None
    print('No database found')

if database:
    DATABASES = {
        'default': database
    }

DATABASE_FOUND = database is not None


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'
